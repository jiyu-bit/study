 library headers ////////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// global variables ///////////////////////////////////////
#pragma pack(1)
typedef struct_fileheader{
	char data[14];


}BFH;
typedef struct_infoheader{
	char data[40];


}BIH;
typedef struct_rgb{
	char data[3];



}RGB;

typedef struct_bmpImage{
BFH fh;
BFH ih;
BFH* table;

}BMP;
// section function body //////////////////////////////////

int main(void) {
	//정적배열
	int nums[10];
	int len = 10;
	int* p = (int*)malloc(len * 4);

	len += 22;
	realloc(); //이 함수는 동적할당으로 생선된 것만 사용가능

	return 0;
}



// start program //////////////////////////////////////////

int main(int argc, char** argv) {
	BMP bmp = { 0 };
	printf("%d \n", sizeof(BMP));
	printf("%d \n", sizeof(bmp));
	//배열명은 0번 요소의 주소다. 
	RGB pixel[512];
	bmp.table = pixel

	bmp.table = (RGB*)malloc(512 * sizeof(RGB));
	//메인함수

	return 0;
}
struct_std{
	char name[60];
	int kor;
	int eng;
	int math;

};


int main_02(void) {
	//동적할당 : 포인터 변수, 함수 - 결국 배열
	char* p =(char*)malloc(60 * sizeof(char)); //동적할당 함수/ 표시
	// p[0] ~ p[59]
	int length = 60; // 배열의 크기를 산술적으로 표시....
	for (int i = 0; i < length; ++1) {
		p[i] = 'a' + i; ////배열///////////////////////////////////////
	}
	p = p + 

	// 동적 할당으로 생성된 공간, 배열은 반드시 해제한다. 
	if (p != NULL) {
		free(p); //이렇게 할당 받은 주소를 다시 써야한다....
		//p를 변경하면 안된다.
		p = NULL;
	}
	return 0;
}
int main_01(int argc, char** argv) {
	char student[80] = { 0 };
	//배열쪼개기
	char student[80] = { 0 };
	char* name = student;
	int* kor = student + 60;
	int* eng = student + 64;
	int* math = student + 68;
	int* score = (int*)(student + 60);// &student[60] 캐릭형 변수의 주소
	//포인터변수는 선언시 지정된 자료형에 따라 동작한다../타입을 맞추는 처리(형변환)...

	scanf_s("%s" , name, 60); //포인터 변수의 크기 4bytr
	scanf_s("%d %d %d", name, 60, score + 0, score + 1, score + 2); // %s 배열에 사이즈
	printf("%s : { %d %d %d} \n",
		name, *kor, *eng, *math);



	return 0;
}
// end program
